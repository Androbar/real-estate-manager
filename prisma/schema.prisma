generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_DATABASE")
}

enum OperationType {
    RENT
    SALE
}

enum PropertyType {
    APARTMENT
    HOUSE
    OFFICE
    WAREHOUSE
    LAND
}

enum Role {
    USER
    ADMIN
}

model User {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    password  String?
    name      String?
    role      Role     @default(USER)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    properties Property[]
    Account    Account[]
    Session    Session[]
}

model Property {
    id            Int           @id @default(autoincrement())
    name          String
    slug          String        @unique
    description   String
    address       String
    location      String? // format -> longitude:latitude
    latitude      String?
    longitude     String?
    city          String
    operationType OperationType // rent, sale, etc
    price         Float?
    expenses      Float?
    currency      String? // usd dollars for now
    type          PropertyType // apartment, house, office, etc

    // Attributes
    areaTotal                 Float?
    areaCovered               Float?
    roomsTotal                Int? // ambientes
    bathrooms                 Int?
    rooms                     Int?
    yearsBuilt                Int?
    propertyFacing            String? // frente contrafrente
    orientation               String?
    carport                   Int?
    ownerId                   Int
    // Other attributes
    // GENERAL
    availableAsOf             String?
    constructionYear          Int?
    buildingCondition         String?
    streetFrontageWidth       Int?
    numberOfFrontages         Int?
    coveredParkingSpaces      Int?
    outdoorParkingSpaces      Int?
    surroundingsType          String?
    // INTERIOR
    livingArea                Int?
    livingRoomSurface         Int?
    kitchenType               String?
    kitchenSurface            Int?
    bedrooms                  Int?
    bedroom1Surface           Int?
    bedroom2Surface           Int?
    bedroom3Surface           Int?
    bedroom4Surface           Int?
    bedroom5Surface           Int?
    showerRooms               Int?
    toilets                   Int?
    officeSurface             Int?
    office                    Boolean?
    professionalSpaceSurface  Int?
    attic                     Boolean?
    furnished                 Boolean?
    heatingType               String?
    // EXTERIOR
    surfaceOfThePlot          Int?
    connectionToSewerNetwork  String?
    gasWaterElectricity       Boolean?
    gardenSurface             Int?
    terraceSurface            Int?
    // FACILITIES
    elevator                  Boolean?
    accessibleForDisabled     Boolean?
    tvCable                   Boolean?
    visioPhone                Boolean?
    swimmingPool              Boolean?
    // TOWN PLANNING AND RISKS
    totalGroundFloorBuildable Int?
    floodZoneType             String?

    propertyImages PropertyImages[]
    owner          User             @relation(fields: [ownerId], references: [id])
    contacts       Contact[]

    createdAt DateTime @default(now())
    // updatedAt DateTime @updatedAt
}

model Image {
    id       Int     @id @default(autoincrement())
    filename String
    url      String  @unique
    caption  String?

    propertyImages PropertyImages[]

    createdAt DateTime @default(now())
    // updatedAt DateTime @updatedAt
}

model PropertyImages {
    propertyId Int
    imageId    Int
    order      Int

    property Property @relation(fields: [propertyId], references: [id])
    image    Image    @relation(fields: [imageId], references: [id])

    @@id([propertyId, imageId])
}

model Contact {
    id         Int      @id @default(autoincrement())
    name       String
    email      String?
    phone      String?
    message    String
    propertyId Int
    property   Property @relation(fields: [propertyId], references: [id])

    createdAt DateTime @default(now())
    // updatedAt DateTime @updatedAt
}

model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
